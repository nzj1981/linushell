linux shell 编程总结
1.在shell下常用组合键
  ctrl + w:删除光标位置前的单词
  ctrl + u:清空行
  ctrl + r:搜索先前使用的命令
  ctrl + c:中止当前命令
  ctrl + d:退出登录shell(也可以输入命令：logout, exit)
  esc + t:调换光标前的两个单词

2.shell脚本所使用的函数都包含在文件/etc/init.d/functions
3.linux中变量关于$一些含义
  $#:是传给脚本的参数个数
  $0:是脚本本身的名字
  $1:是传递给该shell脚本的第一个参数
  $2:是传递给该shell脚本的第二个参数
  $@:是传给脚本的所有参数的列表
  $*:是以一个单字符串显示所有向脚本传递的参数，与位置变量不同，参数可超过9个
  $$:是脚本运行的当前进程ID号
  $?:是显示最后命令的退出状态，0 表示没有错误，其他表示有错误
  $-:记录着当前设置的shell选项（常见设置：himBH）
4.给系统定义欢迎与退出脚本。
  4.1.欢迎脚本
	vim ~/.bash_profile
  

  4.2.退出脚本
	vim ~/.bash_logout
	#clear the termimal screen
	clear

	#clear mysql command history
	#/bin/rm $HOME/.mysql_history

	echo "Backup files to NAS server"
	#backup files to NAS server
5.定义变量及赋值注意点：
  5.1.在赋值操作符“=”的周围，不要有任何空格。正确格式如下：
	varName=varValue
  5.2.算术表达式操作方式
	# let var=2+1
	# echo $var
  5.3.将命令的执行结果赋值给变量，两种方式
	# var=`pwd` # echo $var 或 # var=$(pwd) # echo $var
  5.4.Bash的内置命令read读入的内容赋值给变量
	# echo -n "Enter var:"; read var
	Enter var:123
	# echo $var
	123
  5.5.变量命名规则：必须以字母或下划线字符“_”开头，后面跟字母、数字或下划线字符，第一个字符不能为数字。不要使用?、*和其他特殊字符命名你的变量。变量区分大小写
  5.6.使用echo和printf打印变量的值
	格式：
	var=123
	printf "%s\n" $var
	常用格式
	%d:以带符号十进制数的格式打印相关参数
	%f:以浮点数的格式解析并打印相关参数
	%c:以字符的格式打印相关参数，并且只打印参数中的第一个字符
	%s:以字符串的格式打印相关参数
	%n:指定打印的字符个数
	%%:表示打印一个字符“%”
  5.7.转义字符
	\":打印双引号
	\\:打印一个反斜杠“\”
	\a:发出告警音
	\b:删除前一个字符
	\f:换页符，在某些实现中会清屏，有些会换行。
	\n:换行符
	\r:从行头开始，和换行不一样，仍在本行。
	\t:Tab键
	\v:竖直tab，和\f相似。
  5.8.echo命令也提供转义字符的功能，与printf命令中的基本相同，但需要使用“-e”来激活
	在echo使用中会用到${var}是避免一些歧义，例如：
	logdir=`pwd`
	echo "this is get dir ${logdir}/Downloads"
  5.9. 当引用一个变量时，通常最好用双引号将变量名括起来。
  5.10.删除变量
	unset [-fv]:删除相应的变量或函数，-f表示删除一个已定义的函数，-v选项表示删除一个变量。
  5.11.简单检查变量是否存在
	${varName:? Error: The variable is not defined}
  5.12.Shell中的扩展-大括号扩展
	autumner@autumner-PC:~$ echo a{b,c,d}e
	abe ace ade
	autumner@autumner-PC:~$ echo {1..10}
	1 2 3 4 5 6 7 8 9 10
	autumner@autumner-PC:~$ echo {a..z}
	a b c d e f g h i j k l m n o p q r s t u v w x y z
	autumner@autumner-PC:~$ echo {1..3}{a..c}
	1a 1b 1c 2a 2b 2c 3a 3b 3c
	autumner@autumner-PC:~$ echo a{{b,c,d}a,{e,f,g}b,h}i
	abai acai adai aebi afbi agbi ahi
	autumner@autumner-PC:~$ echo {a,{1..3},c}
	autumner@autumner-PC:~$ mkdir ~/{dir1,dir2,dir3}
	autumner@autumner-PC:~$ echo {10..2..-2}
	10 8 6 4 2
	autumner@autumner-PC:~$ echo {10..2..-2}
	10 8 6 4 2
  5.13.Shell中的扩展-波浪符号扩展
	波浪符号扩展可用来指代你自己的主目录，或其他人的主目录。
	echo ~+ 它会被shell变量PWD的值替代。
	echo ~- 它会被shell变量LODPWD的替代。
  5.14.修改Bash提示符
	vim ~/.bashrc
	export PS1="\e[0;34m\u@\h \w\n\$\e[m "
	特殊字符解释：
	\e[ --指示颜色提示符的开始
	0;34m --颜色代码，此代码代表的是蓝色，编码格式是x;ym
	\e[m --指示颜色提示符的结束
	部分颜色代码如下所示：
	0;30 --黑色
	0;31 --红色
	0;32 --绿色
	0;33 --褐色
	0;34 --蓝色
	0;35 --紫色
	0;36 --青色
	\u --当前用户的用户名， \h --主机名，\w --当前工作目录的全路径， \n --新的一行，
	\$ --如果当前用户UID是0,显示“#”，否则显示“$”, \t --24时制 “HH：MM：SS”格式的当前时间（比如：22：59：25）.

6.常用bash命令学习
  6.1.ls
	ls -F --color=auto /lib 
	将使用不同的特殊字符归类不同的文件类型并且不同的文件类型显示不同的颜色。
	/ --表示目录，@ --表示链接文件 * --表示可执行文件，无特殊字符 --表示普通文件
	ls -strlh   --将以长列表格式按文件或目录的修改时间倒序地列出来文件或目录，字节数以友好方式(K,M,G)显示出来，并且在第一列展示。
  6.2. less
	less /etc/fstab
	/ --在less命令打开的文件中，输入字符“/”后跟要搜索的关键字，输入回车，会高亮显示所有搜索到的关键字, n --向下匹配，N --向上匹配，q or ZZ退出less。
  6.3. who -b --显示系统启动时间 
  6.4. uptime --命令用于打印系统的运行时间等信息，其中：load average:代表系统过去1分钟，5分钟，15分钟的平均负载。

第四章、shell命令进阶
7. paste:合并文件
	paste file1 file2
	增加分隔符
	paste -d '|' file1 file2
	指定多个分隔符
	paste -d ':,' file1 file2 file3
8.解压指定文件或目录
	tar -xvf home_yantaol.tar --wildcards '*.jpg'
	向已存在的tar包里增加文件或目录
	tar -rvf home_yantaol.tar /home/yantaol/newfile
	核实tar包中内容与文件系统中的内容的差异
	tar -dvf home_yantaol.tar
9.监测和管理磁盘
	9.1 mount umount df du
第五章、Shell编程基础
10.间接参数扩展
	${!PARAMETER}
	# PARAMETER=TEMP
	# TEMP="It's indirect"
    # echo ${!PARAMETER}
It's indirect
	大小写修改（Bash 4.0的新特性）
	${PARAMETER^} 首字母大写
	${PARAMETER^} 全部字母大写
    ${PARAMETER，} 首字母小写
	${PARAMETER，，} 全部字母小写
	${PARAMETER～} 原来字母大写转换小写
	${PARAMETER～～} 原来字母大写全部转换小写
	10.1 求字符长度
	${#PARAMETER}
autumn@autumn-pc ~/shelldir $ MYSTRING="This is used for replacing string or removing string"
autumn@autumn-pc ~/shelldir $ echo ${#MYSTRING}
52
autumn@autumn-pc ~/shelldir $ echo ${MYSTRING:8}
used for replacing string or removing string
autumn@autumn-pc ~/shelldir $ echo ${MYSTRING:8:10}
used for r
autumn@autumn-pc ~/shelldir $ echo ${MYSTRING:8:11}
used for re
	10.2 使用默认值
	${PARAMETER:-WORD}
	${PARAMETER-WORD}
	${PARAMETER:=WORD}
	${PARAMETER=WORD}
	10.3.使用替代值
	${PARAMETER:+WORD}
	${PARAMETER+WORD}
	10.4 echo $- :将扩展为当前的选项标志。
	echo $$ :将扩展为当前shell进程号
	echo $0: 将扩展为shell或shell脚本名称
	echo $_:在shell启动时，它被设为开始运行的shell或shell脚本的路径。
	10.5.declare指定变量的类型
	declare -r var=1  --把指定变量定义为只读变量，这些变量不能再被赋予新值或被清除
	declare -i NUMBER --把指定的变量定义为整数型变量，赋予整数型变量的任何类型的值将被转换成整数。
	
11. Bash中的数组变量
	11.1 显式声明一个数组变量
	declare -a ARRAYNAME
autumn@autumn-pc ~/shelldir $ declare -a linux=('Debian' 'Redhat' 'Suse' 'Fedora')
autumn@autumn-pc ~/shelldir $ echo ${linux[@]}
Debian Redhat Suse Fedora
autumn@autumn-pc ~/shelldir $ echo ${linux[*]}
Debian Redhat Suse Fedora
autumn@autumn-pc ~/shelldir $ declare -a arr1=("one" "two" "three")
autumn@autumn-pc ~/shelldir $ echo ${arr1[*]}
one two three
autumn@autumn-pc ~/shelldir $ echo ${arr1[1]}
two
autumn@autumn-pc ~/shelldir $ echo ${arr1[0]}
one
若要引用数组中某一项的内容，必须要使用花括号"{}"，如果索引编号是"@"或"*",那么数组的所有成员都将被引用。

12.shell算术运算
	12.1 let var=5**2
	12.2 数字常量
	let dec=20 默认为十进制
	let oct=020 默认为八进制
	let hex=0x20 以0x开头的十六进制
	let bin=2#111 符号“#”之前的数字2表示些数为二进制 let bin=32#20 三十二进制数，值为20
	let base64=64#@_ 在六十四进制中，十进制的0～9即用0～9表示，10-35这个26个数依次用小写字母a～z表示，36-61 这26个数依次用大写字母A～Z表示，最后剩余的62和63分别用@和_表示
	12.3 expr命令是一个用于对表大式进行求值并输出相应结果的命令工具。同样也只支持整数运算。
	与let相反，表达式中的运算符左右必须包含空格，对于某些运算符，还需要“\”进行转义
autumn@autumn-pc ~/shelldir $ expr 2 \* 2
4
autumn@autumn-pc ~/shelldir $ expr 1 \< 2
1
autumn@autumn-pc ~/shelldir $ expr 2 \> 5
0
第六章 shell的条件执行
	13. test命令：文件属性测试；字符串测试；算术测试
	test -d "$HOME"; echo $?
第七章 Bash循环
	14.until循环与while循环类似，也同样基于一个条件，不过它循环条件为假时才执行。
	var=1
	until [ $var -gt 3 ]
	do
		echo "The for loop is run $var times."
		var=$(( var + 1 ))
	done
	15.select 循环语句特点：
	1).select语句使用Bash内部变量PS3的值作为它的提示符信息。
	2).打印到屏幕上的列表LIST中的每一项会在前面加上一个数字编号。
	3).当用户输入的数字与某一个数字编号一致时，列表中相应的项即被赋予变量VAR
	4).如果用户输入的内容为空，将重新显示列表LIST中的项和提示符信息。
	5).可以通过添加一个退出选项，或按ctrl+c或ctrl+d组合键退出select循环
autumn@autumn-pc ~/shelldir $ cat selectloop.sh 
#! /bin/bash -
#author autumner
#date 2018.3.16
#filename:selectloop.sh

PS3="Run command: "

select choice in date w hostname "uname -a" Exit
do

	case $choice in
	
	date)
		echo "=========="
		echo "Current system date and time:"
		echo "=========="
		$choice
		;;
	w)
		
		echo "=========="
		echo "Who is logged on and what they are dong;"
		echo "=========="
		$choice
		;;
	hostname)
		echo "=========="
		echo "Hostname"
		echo "=========="
		$choice
		;;
	"uname -a")
		echo "=========="
		echo "Who is logged on and what they are dong;"
		echo "=========="
		$choice
		;;
	Exit)
		echo "=========="
		echo "Bye!"
		echo "=========="
		exit 0
		;;
	esac
done

运行：
autumn@autumn-pc ~/shelldir $ bash selectloop.sh 
1) date
2) w
3) hostname
4) uname -a
5) Exit
Run command: 1
==========
Current system date and time:
==========
2018年 04月 16日 星期一 15:14:49 CST
Run command: 2   
==========
Who is logged on and what they are dong;
==========
 15:14:55 up  5:07,  1 user,  load average: 0.00, 0.00, 0.00
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
autumn   tty8     :0               10:08    5:07m  2:16   0.25s cinnamon-sessio
Run command: 4
==========
Who is logged on and what they are dong;
==========
Linux autumn-pc 4.4.0-75-generic #96-Ubuntu SMP Thu Apr 20 09:56:33 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
Run command: 5
==========
Bye!
==========
第8章函数
	16.函数定义
	function name { command1; command2; command3 }
	或
	name() { command1; command2; command3 }
	如果有关键字function，则可能省略圆括号“()”
	函数调用
	name var1 var2
	17.return返回值定义
	在函数里有shell内置命令return，函数执行到return语句时结束，并且返回到shell脚本中调用函数位置的下一个命令。如果return带有一个数值型参数，则这个参数就是函数的返回值，返回值范围(0~255).
第九章正则表达式
	18.需要详细研究
	19.
第十章脚本输入处理
	20.使用shift命令处理命令行参数
	shift [n] --此命令用于将传递的参数变量向左移
	n必须是一个小于或等于“$#"的非负整数。如果n为0,位置参数将不会改变。如果没有指定n，将被默认设为1.如果大于$#，位置参数同样不会改变，如果n大于$#或小于0,此命令的返回状态将大于0,否则为0.
	21.使用for循环读取多个参数
	...
	index=1
	for arg in $*
	do
		echo "Arg #$index = $arg"
		let index+=1
	done
	....
	for arg in $@
	do
	echo "Arg #$index = $arg"
	let index+=1
	done
注意：在两个for循环中调用的变量分别为$*和$@，这个两个变量是不加双引号（”“）的，如果加上了其值将扩展为包含所有位置参数的值的单个字符串。
	22.使用case语句处理命令行选项
	casechoice.sh -i input.txt -o output.txt
	23.使用getopts处理多命令行选项

	24.使用getopt处理多命令行选项

	25.获得用户输入
	read [ -p prompt] [variable1 variable2...]  -p --显示prompt的提示信息
	read [ -t number] [variable1 variable2..] -t --设置输入超时
	read -s 隐藏用户输入。



